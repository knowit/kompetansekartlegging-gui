type FormDefinition @model 
@key(name: "byCreatedAt", fields: ["sortKeyConstant", "createdAt"], queryField: "formByCreatedAt") {
    id: ID!
    createdAt: AWSDateTime!
    sortKeyConstant: String!
    questions: [Question] @connection(keyName: "byFormDefinition", fields: ["id"])
}

type UserForm @model @auth(rules: [
    { allow: owner },
    { allow: groups, groups: ["admin"] },
    { allow: groups, groups: ["groupLeader"], operations: [read] },
])
@key(name: "byCreatedAt", fields: ["owner", "createdAt"], queryField: "userFormByCreatedAt") {
    id: ID!
    createdAt: AWSDateTime!
    owner: String
    formDefinitionID: ID!
    questionAnswers: [QuestionAnswer]!
        @connection(keyName: "byUserForm", fields: ["id"]) 
    formDefinition: FormDefinition! @connection(fields: ["formDefinitionID"])
}

type QuestionAnswer @model @auth(rules: [
    { allow: owner },
    { allow: groups, groups: ["admin"] },
    { allow: groups, groups: ["groupLeader"], operations: [read] },
])
@key(name: "byUserForm", fields: ["userFormID"]) {
    id: ID!
    userFormID: ID!
    questionID: ID!
    knowledge: Float!
    motivation: Float!
    question: Question! @connection(fields: ["questionID"])
}

type Question @model 
@key(name: "byFormDefinition", fields: ["formDefinitionID"]) {
    id: ID!
    text: String!
    topic: String!
    qid: String
    index: Int
    formDefinitionID: ID!
    categoryID: ID!
    category: Category! @connection(fields: ["categoryID"])
}

type Category @model {
    id: ID!
    text: String!
    description: String
    index: Int
}

type Group @model {
    id: ID!
    groupLeaderID: String!
    groupLeader: User! @connection(fields: ["groupLeaderID"])
}

type User @model {
    id: String!
    groupID: ID!
    group: Group! @connection(fields: ["groupID"])
}

type CreateQuestionAnswerResult {
    status: Int!
    error: String
    failedInputs: [CreateQuestionAnswerFailedInput]
}

type CreateQuestionAnswerFailedInput {
    id: ID
    userFormID: ID!
    questionID: ID!
    knowledge: Float!
    motivation: Float!
    formDefinitionID: String!
}

input CreateQuestionAnswerInput {
    id: ID
    userFormID: ID!
    questionID: ID!
    knowledge: Float!
    motivation: Float!
    formDefinitionID: String!
}

type Mutation {
    batchCreateQuestionAnswer(
        input: [CreateQuestionAnswerInput]
    ): CreateQuestionAnswerResult @function(name: "createUserformBatch-${env}")
}
