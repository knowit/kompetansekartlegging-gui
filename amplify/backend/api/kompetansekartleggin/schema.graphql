

type FormDefinition @model 
@key(name: "byCreatedAt", fields: ["dummy", "createdAt"], queryField: "formByCreatedAt") {
    id: ID!
    createdAt: AWSDateTime!
    sortKeyConstant: String!
    questions: [Question] @connection(keyName: "byFormDefinition", fields: ["id"])
}

type UserForm @model @auth(rules: [{ allow: owner }]) 
@key(name: "byCreatedAt", fields: ["dummy", "createdAt"]) {
    id: ID!
    createdAt: AWSDateTime!
    dummy: String!
    formDefinitionID: ID!
    questionAnswers: [QuestionAnswer]!
        @connection(keyName: "byUserForm", fields: ["id"]) 
    formDefinition: FormDefinition! @connection(fields: ["formDefinitionID"])
}

type QuestionAnswer @model @auth(rules: [{ allow: owner }])
@key(name: "byUserForm", fields: ["userFormID"]) {
    id: ID!
    userFormID: ID!
    questionID: ID!
    knowledge: Float!
    motivation: Float!
    question: Question! @connection(fields: ["questionID"])
}

type Question @model 
@key(name: "byFormDefinition", fields: ["formDefinitionID"]) {
    id: ID!
    text: String!
    topic: String!
    qid: String
    index: Int
    formDefinitionID: ID!
    categoryID: ID!
    category: Category! @connection(fields: ["categoryID"])
}

type Category @model {
    id: ID!
    text: String!
    description: String
}

input CreateQuestionAnswerInput {
    id: ID
    userFormID: ID!
    questionID: ID!
    knowledge: Float!
    motivation: Float!
    environmentID: String!
}

input BatchTableEnvironmentInput {
    envID: String!
}

type Mutation {
    batchCreateQuestionAnswer(
        input: [CreateQuestionAnswerInput]
    ): [QuestionAnswer] @function(name: "createUserformBatchLambda")
    # batchCreateQuestionAnswerOld(
    #     input: [CreateQuestionAnswerInput]
    #     env: BatchTableEnvironmentInput
    # ): [QuestionAnswer] @function(name: "createUserformBatchLambda")
}
