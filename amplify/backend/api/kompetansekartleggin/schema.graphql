type FormDefinition
    @model
    @auth(
        rules: [
            { allow: private, operations: [read] }
            { allow: groups, groups: ["admin"] }
        ]
    )
    @key(
        name: "byCreatedAt"
        fields: ["sortKeyConstant", "createdAt"]
        queryField: "formByCreatedAt"
    ) {
    id: ID!
    label: String
    createdAt: AWSDateTime!
    sortKeyConstant: String!
    questions: [Question]
        @connection(keyName: "byFormDefinition", fields: ["id"])
}

type UserForm
    @model
    @auth(
        rules: [
            { allow: owner }
            { allow: groups, groups: ["admin"] }
            { allow: groups, groups: ["groupLeader"], operations: [read] }
        ]
    )
    @key(
        name: "byCreatedAt"
        fields: ["owner", "createdAt"]
        queryField: "userFormByCreatedAt"
    ) {
    id: ID!
    createdAt: AWSDateTime!
    owner: String
    formDefinitionID: ID!
    questionAnswers: [QuestionAnswer]!
        @connection(keyName: "byUserForm", fields: ["id"])
    formDefinition: FormDefinition! @connection(fields: ["formDefinitionID"])
}

type QuestionAnswer
    @model
    @auth(
        rules: [
            { allow: owner }
            { allow: groups, groups: ["admin"] }
            { allow: groups, groups: ["groupLeader"], operations: [read] }
        ]
    )
    @key(name: "byUserForm", fields: ["userFormID"]) {
    id: ID!
    userFormID: ID!
    questionID: ID!
    question: Question @connection(fields: ["questionID"])

    # if question.type == null or knowledgeMotivation
    knowledge: Float
    motivation: Float

    # if question.type == customScaleLabels
    customScaleValue: Float

    # if question.type == text
    textValue: String
}

enum QuestionType {
    knowledgeMotivation
    customScaleLabels
    text
}

type Question
    @model
    @auth(
        rules: [
            { allow: private, operations: [read] }
            { allow: groups, groups: ["admin"] }
        ]
    )
    @key(
        name: "byFormDefinition"
        fields: ["formDefinitionID"]
        queryField: "questionsByFormDefinition"
    )
    @key(
        name: "byCategory"
        fields: ["categoryID"]
        queryField: "questionsByCategory"
    ) {
    id: ID!
    text: String!
    topic: String!
    index: Int
    formDefinitionID: ID!
    categoryID: ID!
    category: Category @connection(fields: ["categoryID"])
    type: QuestionType

    # if type == customScaleLabels
    scaleStart: String
    scaleMiddle: String
    scaleEnd: String
}

type Category
    @model
    @auth(
        rules: [
            { allow: private, operations: [read] }
            { allow: groups, groups: ["admin"] }
        ]
    )
    @key(
        name: "byFormDefinition"
        fields: ["formDefinitionID"]
        queryField: "categoriesByFormDefinition"
    ) {
    id: ID!
    text: String!
    description: String
    index: Int
    formDefinitionID: ID!
    formDefinition: FormDefinition @connection(fields: ["formDefinitionID"])
    questions: [Question] @connection(keyName: "byCategory", fields: ["id"])
}

type Group
    @model
    @auth(
        rules: [
            { allow: groups, groups: ["admin"] }
            { allow: groups, groups: ["groupLeader"], operations: [read] }
        ]
    ) {
    id: ID!
    groupLeaderUsername: String!
}

type User
    @model
    @auth(
        rules: [
            { allow: groups, groups: ["admin"] }
            { allow: groups, groups: ["groupLeader"] }
        ]
    )
    @key(name: "byGroup", fields: ["groupID"], queryField: "usersByGroup") {
    id: ID!
    groupID: ID!
    group: Group! @connection(fields: ["groupID"])
}

type CreateQuestionAnswerResult {
    status: Int!
    error: String
    failedInputs: [CreateQuestionAnswerFailedInput]
}

type CreateQuestionAnswerFailedInput {
    id: ID
    userFormID: ID!
    questionID: ID!
    knowledge: Float!
    motivation: Float!
    formDefinitionID: String!
}

input CreateQuestionAnswerInput {
    id: ID
    userFormID: ID!
    questionID: ID!
    knowledge: Float!
    motivation: Float!
    formDefinitionID: String!
}

type Mutation {
    batchCreateQuestionAnswer(
        input: [CreateQuestionAnswerInput]
    ): CreateQuestionAnswerResult @function(name: "createUserformBatch-${env}")
}
